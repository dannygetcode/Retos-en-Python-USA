# -*- coding: utf-8 -*-
"""Retos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jcewq62fG58MFOzms5a2qya_LjFKnomi
"""

#reto1
#entradas

salario_base, horas_extra, bonificacion = input().split()
salario_base= float(salario_base)
horas_extra= int(horas_extra)
bonificacion= int(bonificacion)

#valores

valor_hora= salario_base/192
valor_extra= (valor_hora*1.25)*horas_extra
valor_bonif= (salario_base*0.05)*bonificacion
#salario_total
salario_total= salario_base+valor_extra+valor_bonif

#descuentos

desc_salud= salario_total *0.035
desc_pension= salario_total *0.04
desc_caja= salario_total *0.01

#salario_final

salario_final= salario_total-desc_salud-desc_pension-desc_caja

print(round(salario_final,1))

#RETO 2

#entradas

distancia, velocidad_maxima_permitida, tiempo = [int(valor) for valor in input().split()]
 

distancia/= 1000
tiempo/= 3600

velocidad_media= distancia/tiempo
velocidad_media_mas_porcentaje= velocidad_maxima_permitida*1.20

if velocidad_media < velocidad_maxima_permitida:
  print("OK")
elif velocidad_media > velocidad_maxima_permitida and velocidad_media < velocidad_media_mas_porcentaje:
  print("MULTA")
elif tiempo < 0 or velocidad_maxima_permitida < 0:
  print("ERROR")
elif velocidad_maxima_permitida < velocidad_media and velocidad_media >= velocidad_media_mas_porcentaje:
  print("CURSO SENSIBILIZACION")

#reto3

#entradas
N= int(input())        
bicicletas = []         

#proceso

for i in range(N):     
  bicicletas.append(input().split())

#funcion para calcular entre los rangos requeridos el pedalier, bielas, sillin y el manilar.

def calcular():
  precios = []
  for i in bicicletas:
    if int (i[0]) >= 240 and int(i[0]) <= 300 \
    and int(i[1]) >= 160 and int(i[1]) <= 180 \
    and int(i[2]) >= 240 and int (i[2]) <= 275 \
    and int(i[3]) <= 50:

      precios.append(int(i[4]))

  return  precios

resultado = calcular()

if len(resultado) ==0:
  print("NO DISPONIBLE")
else:
  for i in resultado:
    print(i)

# reto 4

#captura de datos

num_baldosas, capacidad_de_sensor= input().split()
identificador_baldosas= input().split()

num_baldosas= int(num_baldosas)
capacidad_de_sensor= int(capacidad_de_sensor)


for i in range(0,len(identificador_baldosas), 1):
  identificador_baldosas[i]= int(identificador_baldosas[i])

fallas_reales= 0
fallas_sensor= 0
contador= 0
diccionario= dict()

for valor in identificador_baldosas:
  if (valor in diccionario):
    fallas_reales +=1
  if ((valor in diccionario)and (contador - diccionario.get(valor) <= capacidad_de_sensor)):
    fallas_sensor += 1
  diccionario[valor]= contador
  contador += 1
print(fallas_reales,fallas_sensor,contador, end=" ")

# Reto 5

def leer_datos():
  operacion = input()
  producto = input().split()
  producto[0] = int(producto[0])
  producto[2] = float(producto[2])
  producto[3] = int(producto[3])

  return operacion, producto


def borrar(base_datos, producto):
  if producto[0] in base_datos:
    base_datos.pop(producto[0])
    return True
  else:
    return False

def actualizar(base_datos, producto):
  if producto[0] in base_datos:
    clave = producto[0]
    producto.pop(0)
    base_datos[clave] = producto
    return True
  else:
    return False 

def agregar(base_datos, producto):
  if producto[0] in base_datos:
    return False 
  else:
    clave = producto[0]
    producto.pop(0)
    base_datos[clave] = producto
    return True

def precio_mayor(base_datos):
  mayor = list(base_datos.keys())
  mayor = mayor[0]

  for i in base_datos:
    if(base_datos[i][1]) > base_datos[mayor][1]:
      mayor = i
  return base_datos[mayor][0]

def promedio_precios(base_datos):
  promedio = 0
  for i in base_datos:
    promedio += base_datos[i][1]
  promedio / len(base_datos)
  return promedio

def precio_menor(base_datos):
  menor = list(base_datos.keys())[0]
  for i in base_datos:
    if base_datos[i][1] < base_datos[menor][1]:
      menor = i
  return base_datos [menor][0]

def valor_inventario(base_datos):
  valor_inventario= 0.0
  for i in base_datos:
    valor_inventario +=  base_datos[i][1] * base_datos[i][2]
  return valor_inventario

productos = {
    1: ["Manzanas", 5000.0, 25],
    2: ["Limones", 2300.0, 15], 
    3: ["Peras", 2700.0, 33],  
    4: ["Arandanos", 9300.0, 5],  
    5: ["Tomates", 2100.0, 42], 
    6: ["Fresas", 4100.0, 3], 
    7: ["Helado", 4500.0, 41], 
    8: ["Galletas", 500.0, 8], 
    9: ["Chocolates", 3500.0, 80], 
    10:["Jamon", 15000.0, 10]
}

operacion, producto = leer_datos()

if operacion == 'AGREGAR':
  bandera = agregar(productos, producto)
elif operacion == 'BORRAR':
  bandera = (productos, producto)
elif operacion == 'ACTUALIZAR':
  bandera = actualizar(productos, producto)

if bandera == False :
  print('ERROR')
else:
  print(precio_mayor(productos), precio_menor(productos), round(promedio_precios(productos),1), round(valor_inventario(productos),1))

#reto 5

def leer_datos():
  operacion = input()
  producto = input().split()
  producto[0] = int(producto[0])
  producto[2] = float(producto[2])
  producto[3] = int(producto[3])
  
  return operacion, producto

def borrar(base_datos, producto):
  if producto[0] in base_datos:
    base_datos.pop(producto[0])
    return True
  else:
    return False

def actualizar(base_datos, producto):
  if producto[0] in base_datos:
    clave = producto[0]
    producto.pop(0)
    base_datos[clave] = producto
    return True
  else:
    return False

def agregar(base_datos, producto):
  if producto[0] in base_datos:
    return False
  else:
    clave = producto[0]
    producto.pop(0)
    base_datos[clave] = producto
    return True

def precio_mayor(base_datos):
  mayor = list(base_datos.keys())
  mayor = mayor[0]

  for i in base_datos:
    if(base_datos[i][1] > base_datos[mayor][1]):
      mayor = i
  return base_datos[mayor][0]

def precio_menor(base_datos):
  menor = list(base_datos.keys())
  menor = menor[0]

  for i in base_datos:
    if(base_datos[i][1] < base_datos[menor][1]):
      menor = i
  return base_datos[menor][0]

def promedio_precios(base_datos):
  promedio = 0
  for i in base_datos:
    promedio += base_datos[i][1]
  promedio = promedio / len(base_datos)
  return promedio

def valor_inventario(base_datos):
  valor_inventario = 0
  for i in base_datos:
    valor_inventario += base_datos[i][1] * base_datos[i][2]
  return valor_inventario

productos = {
    1: ['Manzanas', 5000.0, 25],
    2: ['Limones', 2300.0, 15],
    3: ['Peras', 2700.0, 33],
    4: ['Arandanos', 9300.0, 5],
    5: ['Tomates', 2100.0, 42],
    6: ['Fresas', 4100.0, 3],
    7: ['Helado', 4500.0, 41],
    8: ['Galletas', 500.0, 8],
    9: ['Chocolates', 3500.0, 80],
    10: ['Jamon', 15000.0, 10]
}

operacion, producto = leer_datos()

if operacion == 'AGREGAR':
  bandera = agregar(productos, producto)
elif operacion == 'BORRAR':
  bandera = borrar(productos, producto)
elif operacion == 'ACTUALIZAR':
  bandera = actualizar(productos, producto)

if bandera == False:
  print("ERROR")
else:
  print(precio_mayor(productos), precio_menor(productos), round(promedio_precios(productos), 1), round(valor_inventario(productos), 1))